---
title: "nccsdata Part 3: Geographic Filters"
date: 2023-11-03
description: "Part 3 of 4 data stories covering the nccsdata R package. This story focuses on working with Census FIPS codes."
featured: false
primaryCtaUrl: https://urbaninstitute.github.io/nccsdata
primaryCtaText: Package Website
format: gfm
type: methods
categories:
  - R packages
author:
  - id: thiya
citation: 
  container-title: National Center for Charitable Statistics
  volume: 1
  issue: 1
links:
  - header: Data Stories in this series
    links:
    - text: "Part 1: Downloading Data"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata/
      icon: article
    - text: "Part 2: NTEE Codes"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-ntee/
      icon: article
    - text: "Part 3: Geographic Filters"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-geo/
      icon: article
    - text: "Part 4: Summarising Data"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-summary/
      icon: article
  - header: "Related Datasets"
    links:
    - text: "Census Crosswalks"  
    - href: https://urbaninstitute.github.io/nccs/datasets/census/
    - icon: article
  - header: Package Links
    links:
    - text: Github Repository
      href: https://github.com/UrbanInstitute/nccsdata
      icon: github
    - text: Package Reference
      href: https://urbaninstitute.github.io/nccsdata/reference/index.html
      icon: link
    - text: Relevant Vignette
      href: https://urbaninstitute.github.io/nccsdata/articles/geo.html
      icon: article
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.align = "center"
)
library(nccsdata)
library(dplyr)
```

## Introduction

In part 3 of this 4-part series on the [`nccsdata`](https://urbaninstitute.github.io/nccsdata/) package, we cover how to filter downloaded NCCS data based on geography.

Legacy NCCS data consists of several geographic variables, such as:

 * `STATE`: 2 letter state abbreviation (all caps)
 * `CITY`: Name of the city associated with the address provided in `ADDRESS` (all caps)
 * `FIPS`: [State + County FIPS codes](https://transition.fcc.gov/oet/info/maps/census/fips/fips.txt) (CBSA) as used by the US Census (five-digit integer)
 
The last variable, *FIPS*, can be used to match observations based on census units. This preserves the external validity of geographic units by aligning them with US census delineations.

In US census data, *FIPS* are also tied to Core Based Statistical Areas (CBSAs) that consist of mutually exclusive Metropolitan Statistical Areas (metros with populations above 50,000) and Micropolitan Statistical Areas (populations above 10,000 and below 50,000). Geographic filtering with US census units therefore requires crosswalking units across multiple levels, such as county and CBSA. Further details and examples of CBSAs and Metropolitan/Micropolitan Statistical Areas are provided on the Census Crosswalks  [page](https://urbaninstitute.github.io/nccs/datasets/census/) of the Urban NCCS Site. 

In this story, we explore CBSA FIPS codes with the [`geo_preview()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/geo_preview.html) function before and demonstrate how these CBSA FIPS can be linked to county FIPS codes via [`map_countyfips()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/map_countyfips.html).

## Exploring CBSA FIPS Codes

The [`geo_preview()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/geo_preview.html) function allows users to preview and retrieve CBSA FIPS codes and/or their associated metadata from a specific state. The code snippet below demonstrates how  [`geo_preview()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/geo_preview.html) returns the names of all CBSAs and their associated FIPS codes. The *within* argument specifies the desired state, in abbreviated form, as input while the *geo* argument returns the specified columns:

```{r}
geo_preview( geo=c("cbsa","cbsafips"), within="FL", type="metro" )
```

The *geo* argument can also be used to return county metadata, as demonstrated below.

```{r}
geo_preview(geo = c("cbsa", "county", "cbsafips"), within = "FL", type = "metro")
```

## Metropolitan and Micropolitan Data

Because CBSAs include combinations of [metropolitan or micropolitan statistical areas](https://www.census.gov/programs-surveys/metro-micro/about.html), [`geo_preview()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/geo_preview.html) allows the user to select either unit using the `type` argument.

The following code snippet shows how to retrieve CBSA names and FIPS codes for all metropolitan statistical areas in Wyoming:

```{r}
geo_preview(geo = c("cbsa","cbsafips"), within = "WY", type = "micro")
```

In the above snippet, setting *type* to *micro* returns data for micropolitan statistical areas.

```{r}
geo_preview(geo = c("cbsa","cbsafips"), within = "WY", type = "metro")
```

## Exploring CSA FIPS

In addition to CBSAs, [`geo_preview()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/geo_preview.html) can also retrieve metadata for [Combined Statistical Areas](https://en.wikipedia.org/wiki/Combined_statistical_area) (CSAs).

CSAs are created by identifying adjacent micropolitan and metropolitan statistical areas that constitute a coherent economic region, typically characterized by shared commercial and commuting zones.

The code snippet below returns all CSA names and FIPS codes for metropolitan statistical areas in Virginia:

```{r}
geo_preview(geo = c("csa","csafips"), 
            within = "VA", 
            type = "metro")
```

## Filtering Legacy Data with County FIPS codes

After retrieving the desired CBSA/CSA FIPS codes, [`map_countyfips()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/map_countyfips.html) can match them with county FIPS codes present in the legacy data, retrieved with [`get_data()`](file:///C:/Users/tpoongundranar/Documents/Urban/NCCS/nccsdata/docs/reference/get_data.html). Downloaded data can then be filtered using these county FIPS codes, as shown below:

```{r}
# Retrive CBSA FIPS from NY
cbsa_ny <- geo_preview(geo = c("cbsa", "cbsafips"), 
                       within = "NY")

# Map these to county FIPS codes
ny_countyfips <- map_countyfips(geo.cbsafips = cbsa_ny$cbsafips)

# Pull core data for the year 2015
core_2015 <- get_data(dsname = "core",
                      time = "2015",
                      scope.orgtype = "NONPROFIT",
                      scope.formtype = "PZ")

# Filter with NY county FIPS
core_2015_nyfips <- core_2015 %>% 
  dplyr::filter(FIPS %in% ny_countyfips)

print(as_tibble(core_2015_nyfips))
```

## Conclusion

Using FIPS codes allows researchers working with NCCS data to standardize their operationalized geographic variables, resulting in greater external validity and reproducibility in their research. 

